/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/
// ATTEMPT 1
function Euler12(n) {
  var i = 1, sum = 0;
  for (var i = 1; ; i++) {
    sum += i;
    var half = sum/2, factors = 1;
    for (k = 0; k <= half; k++) {
      if (sum % k === 0) factors++;
    }
    if (factors > n) return sum;
  }
}

console.log(Euler12(500));

// MARGINALLY BETTER ATTEMPT 2
function Euler12(n) {
  var i = 1, sum = 0;
  for (var i = 1; ; i++) {
    sum += i;
    var half = sum/2, factors = 1, third = sum / 3;
    if (sum % 2 !== 0) {
      if (sum % 3 == 0) {
        for (k = 0; k <= third; k += 2) {
          if (sum % k === 0) factors++;
        }
      }
    } else {
      for (k = 0; k <= half; k++) {
        if (sum % k === 0) factors++;
      }
    }
    if (factors > n) return sum;
  }
}

console.log(Euler12(500));

// ATTEMPT 3

function numberDivisors(n) {
  var half = n/2, factors = 1;
  for (k = 0; k <= half; k++) {
    if (n % k === 0) factors++;
  }
  return factors;
}

function maxDivisors(n) {
  for (i = 0; ;i++) {
    if (numberDivisors(i) > n) return n;
  }
}

function pyramid(n) {
  var pyramidNumbers = [], sum = 0;
  for (i=1; i <= n; i++) {
    sum += i;
    pyramidNumbers.push(sum);
  }
  return pyramidNumbers;
}

function pyramidDivisors(numDivisors, pyrSize){
  var x = 0;
  for (i = 1; ; i++) {
    if (maxDivisors(i) >= numDivisors) x = i;
  }
  var pyramidNumbers = pyramid(pyrSize);
  var y = pyramidNumbers.length;
  var pyrIndex = 0;
  for (i = 0; i < y ; i++) {
    if (pyramidNumbers[i] > x) pyrIndex = i;
  }
  for (i = pyrIndex; i < y; i++) {
    if (maxDivisors(pyramidNumbers[i]) >= 500) return pyramidNumbers[i];
  }
}

function test(a,b,c) {
  var pyr = pyramid(b);
  for (i = a; i < b; i++) {
    if (numberDivisors(pyr[i]) > c) return pyr[i];
  }
  return 0;
}


// Attempt 4 after looking at the answer a couple weeks ago.

// find number of factors for a number

function factors(x) {
  var factorArray = [], h = x;
  for (i = 1; i < h; i++) {
    if (x % i == 0) {
      factorArray.push(i);
      factorArray.push(x / i);
      h = x / i;
    }
  }
  return(factorArray.length);
}


function pyramidFactors(n) {
  var sum = 0;
  for (var i = 1; ;i++) {
    sum += i;
    if (factors(sum) >= n) return sum;
  }
}

// The above didn't work unless I declared i as a variable.
















//
